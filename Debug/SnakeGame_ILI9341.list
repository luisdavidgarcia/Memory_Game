
SnakeGame_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .user_data    00096000  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0809af64  0809af64  000b000c  2**0
                  CONTENTS
  5 .ARM          00000008  0809af64  0809af64  000aaf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0809af6c  0809af6c  000b000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0809af6c  0809af6c  000aaf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0809af70  0809af70  000aaf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  20000000  0809af74  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000016c  2000000c  0809af80  000b000c  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20000178  0809af80  000b0178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000b000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010322  00000000  00000000  000b003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b6  00000000  00000000  000c035e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  000c2918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  000c3648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c30  00000000  00000000  000c4280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010807  00000000  00000000  000eaeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eba46  00000000  00000000  000fb6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e70fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003460  00000000  00000000  001e7150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004efc 	.word	0x08004efc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004efc 	.word	0x08004efc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_SPI_TxCpltCallback>:
#define MIN(a, b) (((a)>(b)) ? (b) : (a))
#define bitcheck(a,b)   (a >> b) & 1

static __IO uint8_t flg_done; // DMA Transfer complete flag

void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	flg_done = 1;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <HAL_SPI_TxCpltCallback+0x1c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028

080004ec <setReset>:

void ILI9341_setBackLight(uint8_t v) {
	HAL_GPIO_WritePin(BACKLIGHT_GPIO_PORT, BACKLIGHT_PIN, (v)? GPIO_PIN_SET : GPIO_PIN_RESET);
}

static inline void setReset(uint8_t v) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RESET_GPIO_PORT, RESET_PIN, (v)? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf14      	ite	ne
 80004fc:	2301      	movne	r3, #1
 80004fe:	2300      	moveq	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 fe72 	bl	80021f4 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <setDC>:

static inline void setDC(uint8_t v) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_PORT, DC_PIN, (v)? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf14      	ite	ne
 8000528:	2301      	movne	r3, #1
 800052a:	2300      	moveq	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f001 fe5c 	bl	80021f4 <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <setCS>:

static inline void setCS(uint8_t v) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, (v)? GPIO_PIN_SET : GPIO_PIN_RESET);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf14      	ite	ne
 8000554:	2301      	movne	r3, #1
 8000556:	2300      	moveq	r3, #0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <setCS+0x2c>)
 8000562:	f001 fe47 	bl	80021f4 <HAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	48000400 	.word	0x48000400

08000574 <writeCmd>:

static inline void writeCmd(uint8_t c){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	setDC(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffca 	bl	8000518 <setDC>
	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 8000584:	1df9      	adds	r1, r7, #7
 8000586:	2301      	movs	r3, #1
 8000588:	2201      	movs	r2, #1
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <writeCmd+0x24>)
 800058c:	f003 fa64 	bl	8003a58 <HAL_SPI_Transmit>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000003c 	.word	0x2000003c

0800059c <writeData>:

static inline void writeData(uint8_t d){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  setDC(1);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffb6 	bl	8000518 <setDC>
  HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 80005ac:	1df9      	adds	r1, r7, #7
 80005ae:	2301      	movs	r3, #1
 80005b0:	2201      	movs	r2, #1
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <writeData+0x24>)
 80005b4:	f003 fa50 	bl	8003a58 <HAL_SPI_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000003c 	.word	0x2000003c

080005c4 <writeData16>:

static inline void writeData16(uint16_t d){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
  uint8_t d2[2] = {(d >> 8) & 0xff, d & 0xff};
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	733b      	strb	r3, [r7, #12]
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	737b      	strb	r3, [r7, #13]
  setDC(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff ff9a 	bl	8000518 <setDC>
  HAL_SPI_Transmit(&hspi1, d2, 2, 1);
 80005e4:	f107 010c 	add.w	r1, r7, #12
 80005e8:	2301      	movs	r3, #1
 80005ea:	2202      	movs	r2, #2
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <writeData16+0x38>)
 80005ee:	f003 fa33 	bl	8003a58 <HAL_SPI_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000003c 	.word	0x2000003c

08000600 <ILI9341_Init>:


void ILI9341_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  setReset(0);
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ff70 	bl	80004ec <setReset>
  HAL_Delay(20);
 800060c:	2014      	movs	r0, #20
 800060e:	f001 f8d9 	bl	80017c4 <HAL_Delay>
  setReset(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff6a 	bl	80004ec <setReset>
  HAL_Delay(20);
 8000618:	2014      	movs	r0, #20
 800061a:	f001 f8d3 	bl	80017c4 <HAL_Delay>

  ILI9341_MemoryAccessControl_t mac = {
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <ILI9341_Init+0x44>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	713b      	strb	r3, [r7, #4]
    .ML  = 0,
    .BGR = 1,
    .MH  = 0
  };

  ILI9341_setMemoryAccessControl(&mac);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8d2 	bl	80007d0 <ILI9341_setMemoryAccessControl>

  ILI9341_setPixelFormat(0x05, 0x05);
 800062c:	2105      	movs	r1, #5
 800062e:	2005      	movs	r0, #5
 8000630:	f000 f81a 	bl	8000668 <ILI9341_setPixelFormat>

  ILI9341_sleepOut();
 8000634:	f000 f808 	bl	8000648 <ILI9341_sleepOut>

  ILI9341_setDisplayOn();
 8000638:	f000 f845 	bl	80006c6 <ILI9341_setDisplayOn>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08004f14 	.word	0x08004f14

08000648 <ILI9341_sleepOut>:
  setCS(0);
  writeCmd(0x10);
  setCS(1);
}

void ILI9341_sleepOut() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  setCS(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff ff79 	bl	8000544 <setCS>
  writeCmd(0x11);
 8000652:	2011      	movs	r0, #17
 8000654:	f7ff ff8e 	bl	8000574 <writeCmd>
  setCS(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff73 	bl	8000544 <setCS>

  HAL_Delay(60);
 800065e:	203c      	movs	r0, #60	; 0x3c
 8000660:	f001 f8b0 	bl	80017c4 <HAL_Delay>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <ILI9341_setPixelFormat>:


void ILI9341_setPixelFormat(uint8_t dpi, uint8_t dbi)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
  dpi &= 0x07;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	71fb      	strb	r3, [r7, #7]
  dbi &= 0x07;
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	71bb      	strb	r3, [r7, #6]

  uint8_t v = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

  v |= dpi << 4;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	b25a      	sxtb	r2, r3
 8000692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000696:	4313      	orrs	r3, r2
 8000698:	b25b      	sxtb	r3, r3
 800069a:	73fb      	strb	r3, [r7, #15]
  v |= dbi;
 800069c:	7bfa      	ldrb	r2, [r7, #15]
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	73fb      	strb	r3, [r7, #15]

  setCS(0);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff4d 	bl	8000544 <setCS>
  writeCmd(0x3A);
 80006aa:	203a      	movs	r0, #58	; 0x3a
 80006ac:	f7ff ff62 	bl	8000574 <writeCmd>
  writeData(v);
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff72 	bl	800059c <writeData>
  setCS(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff43 	bl	8000544 <setCS>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <ILI9341_setDisplayOn>:
  setCS(0);
  writeCmd(0x28);
  setCS(1);
}

void ILI9341_setDisplayOn(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  setCS(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ff3a 	bl	8000544 <setCS>
  writeCmd(0x29);
 80006d0:	2029      	movs	r0, #41	; 0x29
 80006d2:	f7ff ff4f 	bl	8000574 <writeCmd>
  setCS(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ff34 	bl	8000544 <setCS>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <ILI9341_setColumnAddress>:

void ILI9341_setColumnAddress(uint16_t sc, uint16_t ec){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	80fb      	strh	r3, [r7, #6]
 80006ec:	4613      	mov	r3, r2
 80006ee:	80bb      	strh	r3, [r7, #4]
  setCS(0);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff27 	bl	8000544 <setCS>
  writeCmd(0x2A);
 80006f6:	202a      	movs	r0, #42	; 0x2a
 80006f8:	f7ff ff3c 	bl	8000574 <writeCmd>
  writeData16(sc);
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff60 	bl	80005c4 <writeData16>
  writeData16(ec);
 8000704:	88bb      	ldrh	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff5c 	bl	80005c4 <writeData16>
  setCS(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff19 	bl	8000544 <setCS>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <ILI9341_setPageAddress>:

void ILI9341_setPageAddress(uint16_t sp, uint16_t ep){
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	460a      	mov	r2, r1
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	4613      	mov	r3, r2
 8000728:	80bb      	strh	r3, [r7, #4]
  setCS(0);
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff ff0a 	bl	8000544 <setCS>
  writeCmd(0x2B);
 8000730:	202b      	movs	r0, #43	; 0x2b
 8000732:	f7ff ff1f 	bl	8000574 <writeCmd>
  writeData16(sp);
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff43 	bl	80005c4 <writeData16>
  writeData16(ep);
 800073e:	88bb      	ldrh	r3, [r7, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff3f 	bl	80005c4 <writeData16>
  setCS(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff fefc 	bl	8000544 <setCS>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <ILI9341_MemoryWrite>:

void ILI9341_MemoryWrite(const void *buffer, uint32_t size) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]

  setCS(0);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff fef0 	bl	8000544 <setCS>
  writeCmd(0x2C);
 8000764:	202c      	movs	r0, #44	; 0x2c
 8000766:	f7ff ff05 	bl	8000574 <writeCmd>
  setDC(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fed4 	bl	8000518 <setDC>

  uint8_t *p = (uint8_t*)buffer;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60fb      	str	r3, [r7, #12]

  while (0 < size) {
 8000774:	e01e      	b.n	80007b4 <ILI9341_MemoryWrite+0x60>
    uint16_t sz = MIN(65536 - 8, size);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 800077c:	4293      	cmp	r3, r2
 800077e:	bf28      	it	cs
 8000780:	4613      	movcs	r3, r2
 8000782:	817b      	strh	r3, [r7, #10]

    flg_done = 0;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <ILI9341_MemoryWrite+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&hspi1, p, sz);
 800078a:	897b      	ldrh	r3, [r7, #10]
 800078c:	461a      	mov	r2, r3
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	480e      	ldr	r0, [pc, #56]	; (80007cc <ILI9341_MemoryWrite+0x78>)
 8000792:	f003 facf 	bl	8003d34 <HAL_SPI_Transmit_DMA>

    while (!flg_done) {
 8000796:	e000      	b.n	800079a <ILI9341_MemoryWrite+0x46>
      __NOP();
 8000798:	bf00      	nop
    while (!flg_done) {
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <ILI9341_MemoryWrite+0x74>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f9      	beq.n	8000798 <ILI9341_MemoryWrite+0x44>
    }

    //    HAL_SPI_DMAStop (&hspi1);

    p += sz;
 80007a4:	897b      	ldrh	r3, [r7, #10]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
    size -= sz;
 80007ac:	897b      	ldrh	r3, [r7, #10]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	603b      	str	r3, [r7, #0]
  while (0 < size) {
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1dd      	bne.n	8000776 <ILI9341_MemoryWrite+0x22>
  }

  setCS(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fec2 	bl	8000544 <setCS>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000028 	.word	0x20000028
 80007cc:	2000003c 	.word	0x2000003c

080007d0 <ILI9341_setMemoryAccessControl>:

void ILI9341_setMemoryAccessControl(const ILI9341_MemoryAccessControl_t *control) 
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if (control == NULL) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d056      	beq.n	800088c <ILI9341_setMemoryAccessControl+0xbc>
    return;
  }

  uint8_t v = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]

  v |= (!!control->MY)  << 7;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	01db      	lsls	r3, r3, #7
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	73fb      	strb	r3, [r7, #15]
  v |= (!!control->MX)  << 6;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	015b      	lsls	r3, r3, #5
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000800:	b25a      	sxtb	r2, r3
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4313      	orrs	r3, r2
 8000808:	b25b      	sxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
  v |= (!!control->MV)  << 5;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	b25b      	sxtb	r3, r3
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	b25a      	sxtb	r2, r3
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4313      	orrs	r3, r2
 8000820:	b25b      	sxtb	r3, r3
 8000822:	73fb      	strb	r3, [r7, #15]
  v |= (!!control->ML)  << 4;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	b25b      	sxtb	r3, r3
 800082c:	f003 0310 	and.w	r3, r3, #16
 8000830:	b25a      	sxtb	r2, r3
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4313      	orrs	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	73fb      	strb	r3, [r7, #15]
  v |= (!!control->BGR) << 3;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	b25b      	sxtb	r3, r3
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	b25a      	sxtb	r2, r3
 800084c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000850:	4313      	orrs	r3, r2
 8000852:	b25b      	sxtb	r3, r3
 8000854:	73fb      	strb	r3, [r7, #15]
  v |= (!!control->MH)  << 2;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	b25b      	sxtb	r3, r3
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	b25a      	sxtb	r2, r3
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4313      	orrs	r3, r2
 800086c:	b25b      	sxtb	r3, r3
 800086e:	73fb      	strb	r3, [r7, #15]

  setCS(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fe67 	bl	8000544 <setCS>
  writeCmd(0x36);
 8000876:	2036      	movs	r0, #54	; 0x36
 8000878:	f7ff fe7c 	bl	8000574 <writeCmd>
  writeData(v);
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe8c 	bl	800059c <writeData>
  setCS(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fe5d 	bl	8000544 <setCS>
 800088a:	e000      	b.n	800088e <ILI9341_setMemoryAccessControl+0xbe>
    return;
 800088c:	bf00      	nop
}
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <displayDir>:
extern const uint8_t defaultData_green[320 * 240 * 2];
extern const uint8_t defaultData_red[320 * 240 * 2];
extern const uint8_t defaultData_blue[320 * 240 * 2];


void displayDir(DIR dir) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	 Displays direction on LCD in BLUE
	 :param p: LCD grid
	 :param dir: direction to display
	 */

	switch (dir) {
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d87c      	bhi.n	80009a0 <displayDir+0x10c>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <displayDir+0x18>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008f5 	.word	0x080008f5
 80008b4:	0800092d 	.word	0x0800092d
 80008b8:	08000967 	.word	0x08000967
	case UP: {
		ILI9341_setColumnAddress(160, 320);
 80008bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80008c0:	20a0      	movs	r0, #160	; 0xa0
 80008c2:	f7ff ff0d 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(0, 240);
 80008c6:	21f0      	movs	r1, #240	; 0xf0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ff26 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_blue, 320 * 240 * 2);
 80008ce:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80008d2:	4836      	ldr	r0, [pc, #216]	; (80009ac <displayDir+0x118>)
 80008d4:	f7ff ff3e 	bl	8000754 <ILI9341_MemoryWrite>

		ILI9341_setColumnAddress(0, 160);
 80008d8:	21a0      	movs	r1, #160	; 0xa0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ff00 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(0, 240);
 80008e0:	21f0      	movs	r1, #240	; 0xf0
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff ff19 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_white, 320 * 240 * 2);
 80008e8:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80008ec:	4830      	ldr	r0, [pc, #192]	; (80009b0 <displayDir+0x11c>)
 80008ee:	f7ff ff31 	bl	8000754 <ILI9341_MemoryWrite>

		break;
 80008f2:	e056      	b.n	80009a2 <displayDir+0x10e>
	}
	case DOWN: {
		ILI9341_setColumnAddress(0, 160);
 80008f4:	21a0      	movs	r1, #160	; 0xa0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fef2 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(0, 240);
 80008fc:	21f0      	movs	r1, #240	; 0xf0
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ff0b 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_blue, 320 * 240 * 2);
 8000904:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <displayDir+0x118>)
 800090a:	f7ff ff23 	bl	8000754 <ILI9341_MemoryWrite>

		ILI9341_setColumnAddress(160, 320);
 800090e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000912:	20a0      	movs	r0, #160	; 0xa0
 8000914:	f7ff fee4 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(0, 240);
 8000918:	21f0      	movs	r1, #240	; 0xf0
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fefd 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_white, 320 * 240 * 2);
 8000920:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000924:	4822      	ldr	r0, [pc, #136]	; (80009b0 <displayDir+0x11c>)
 8000926:	f7ff ff15 	bl	8000754 <ILI9341_MemoryWrite>

		break;
 800092a:	e03a      	b.n	80009a2 <displayDir+0x10e>
	}
	case LEFT: {
		ILI9341_setColumnAddress(0, 320);
 800092c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fed5 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(0, 120);
 8000936:	2178      	movs	r1, #120	; 0x78
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff feee 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_blue, 320 * 240 * 2);
 800093e:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000942:	481a      	ldr	r0, [pc, #104]	; (80009ac <displayDir+0x118>)
 8000944:	f7ff ff06 	bl	8000754 <ILI9341_MemoryWrite>

		ILI9341_setColumnAddress(0, 320);
 8000948:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fec7 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(120, 240);
 8000952:	21f0      	movs	r1, #240	; 0xf0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f7ff fee0 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_white, 320 * 240 * 2);
 800095a:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <displayDir+0x11c>)
 8000960:	f7ff fef8 	bl	8000754 <ILI9341_MemoryWrite>

		break;
 8000964:	e01d      	b.n	80009a2 <displayDir+0x10e>
	}
	case RIGHT: {
		ILI9341_setColumnAddress(0, 320);
 8000966:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff feb8 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(120, 240);
 8000970:	21f0      	movs	r1, #240	; 0xf0
 8000972:	2078      	movs	r0, #120	; 0x78
 8000974:	f7ff fed1 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_blue, 320 * 240 * 2);
 8000978:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <displayDir+0x118>)
 800097e:	f7ff fee9 	bl	8000754 <ILI9341_MemoryWrite>

		ILI9341_setColumnAddress(0, 320);
 8000982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff feaa 	bl	80006e0 <ILI9341_setColumnAddress>
		ILI9341_setPageAddress(0, 120);
 800098c:	2178      	movs	r1, #120	; 0x78
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fec3 	bl	800071a <ILI9341_setPageAddress>
		ILI9341_MemoryWrite(defaultData_white, 320 * 240 * 2);
 8000994:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <displayDir+0x11c>)
 800099a:	f7ff fedb 	bl	8000754 <ILI9341_MemoryWrite>
		break;
 800099e:	e000      	b.n	80009a2 <displayDir+0x10e>
	}
	default: {
		break;
 80009a0:	bf00      	nop
	}
	}
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08075764 	.word	0x08075764
 80009b0:	08004f64 	.word	0x08004f64

080009b4 <displayEmpty>:

void displayEmpty(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/*
	 Displays Green Screen to indicate success
	 :param dir: direction to display
	 :
	 */
	ILI9341_setColumnAddress(0, 320);
 80009b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fe8f 	bl	80006e0 <ILI9341_setColumnAddress>
	ILI9341_setPageAddress(0, 240);
 80009c2:	21f0      	movs	r1, #240	; 0xf0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fea8 	bl	800071a <ILI9341_setPageAddress>
	ILI9341_MemoryWrite(defaultData_white, 320 * 240 * 2);
 80009ca:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80009ce:	4802      	ldr	r0, [pc, #8]	; (80009d8 <displayEmpty+0x24>)
 80009d0:	f7ff fec0 	bl	8000754 <ILI9341_MemoryWrite>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	08004f64 	.word	0x08004f64

080009dc <displayPass>:

void displayPass(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	/*
	 Displays Green Screen to indicate success
	 :param dir: direction to display
	 */

	ILI9341_setColumnAddress(0, 320);
 80009e0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fe7b 	bl	80006e0 <ILI9341_setColumnAddress>
	ILI9341_setPageAddress(0, 240);
 80009ea:	21f0      	movs	r1, #240	; 0xf0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fe94 	bl	800071a <ILI9341_setPageAddress>
	ILI9341_MemoryWrite(defaultData_green, 320 * 240 * 2);
 80009f2:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <displayPass+0x24>)
 80009f8:	f7ff feac 	bl	8000754 <ILI9341_MemoryWrite>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	0804ff64 	.word	0x0804ff64

08000a04 <displayFail>:

void displayFail(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	 Displays Red Screen to indicate success
	 :param p: LCD grid
	 :param dir: direction to display
	 */

	ILI9341_setColumnAddress(0, 320);
 8000a08:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fe67 	bl	80006e0 <ILI9341_setColumnAddress>
	ILI9341_setPageAddress(0, 240);
 8000a12:	21f0      	movs	r1, #240	; 0xf0
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fe80 	bl	800071a <ILI9341_setPageAddress>
	ILI9341_MemoryWrite(defaultData_red, 320 * 240 * 2);
 8000a1a:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000a1e:	4802      	ldr	r0, [pc, #8]	; (8000a28 <displayFail+0x24>)
 8000a20:	f7ff fe98 	bl	8000754 <ILI9341_MemoryWrite>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0802a764 	.word	0x0802a764

08000a2c <ADC12_Init>:
#include "adc.h"
#include "stm32l4xx_hal.h"

void ADC12_Init(void) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000a32:	4b85      	ldr	r3, [pc, #532]	; (8000c48 <ADC12_Init+0x21c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a84      	ldr	r2, [pc, #528]	; (8000c48 <ADC12_Init+0x21c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure GPIO for channel 5 on analog input pin (PA0) ADC1
	// Clear PA0
	GPIOA->MODER &= ~(GPIO_MODER_MODE0_Msk);
 8000a3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a48:	f023 0303 	bic.w	r3, r3, #3
 8000a4c:	6013      	str	r3, [r2, #0]
	// Set pin as analog mode
	GPIOA->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);
 8000a4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a58:	f043 0303 	orr.w	r3, r3, #3
 8000a5c:	6013      	str	r3, [r2, #0]
	// Set analog switch
	GPIOA->ASCR |= GPIO_ASCR_ASC0;
 8000a5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Configure GPIO for channel 6 on analog input (PA1) ADC2
	// Clear PA1
	GPIOA->MODER &= ~(GPIO_MODER_MODE1_Msk);
 8000a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a78:	f023 030c 	bic.w	r3, r3, #12
 8000a7c:	6013      	str	r3, [r2, #0]
	// set pin as analog mode
	GPIOA->MODER |= (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE1_1);
 8000a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a88:	f043 030c 	orr.w	r3, r3, #12
 8000a8c:	6013      	str	r3, [r2, #0]
	// set analog switch
	GPIOA->ASCR |= GPIO_ASCR_ASC1;
 8000a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Enable clock for ADC
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000a9e:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <ADC12_Init+0x21c>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a69      	ldr	r2, [pc, #420]	; (8000c48 <ADC12_Init+0x21c>)
 8000aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
	//ADC will run at the same speed as CPU (CLK/1), Prescaler = 1
	ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 8000aaa:	4b68      	ldr	r3, [pc, #416]	; (8000c4c <ADC12_Init+0x220>)
 8000aac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab0:	609a      	str	r2, [r3, #8]

	/*--------------- Set up ADC1 Here ------------*/
	//Power up the ADC and voltage regulator
	ADC1->CR &= ~(ADC_CR_DEEPPWD);
 8000ab2:	4b67      	ldr	r3, [pc, #412]	; (8000c50 <ADC12_Init+0x224>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	4a66      	ldr	r2, [pc, #408]	; (8000c50 <ADC12_Init+0x224>)
 8000ab8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000abc:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);
 8000abe:	4b64      	ldr	r3, [pc, #400]	; (8000c50 <ADC12_Init+0x224>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	4a63      	ldr	r2, [pc, #396]	; (8000c50 <ADC12_Init+0x224>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6093      	str	r3, [r2, #8]
	// delay for voltage regulation startup time ~ 20 us
	for (uint32_t i = 0; i < DELAY_TIME; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	e002      	b.n	8000ad6 <ADC12_Init+0xaa>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f5b3 6f7b 	cmp.w	r3, #4016	; 0xfb0
 8000adc:	d3f8      	bcc.n	8000ad0 <ADC12_Init+0xa4>
		;
	// Calibrate the ADC1 and ensure ADC1 is disabled and single-ended mode
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 8000ade:	4b5c      	ldr	r3, [pc, #368]	; (8000c50 <ADC12_Init+0x224>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4a5b      	ldr	r2, [pc, #364]	; (8000c50 <ADC12_Init+0x224>)
 8000ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	6093      	str	r3, [r2, #8]
	// start the calibration
	ADC1->CR |= ADC_CR_ADCAL;
 8000aee:	4b58      	ldr	r3, [pc, #352]	; (8000c50 <ADC12_Init+0x224>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	4a57      	ldr	r2, [pc, #348]	; (8000c50 <ADC12_Init+0x224>)
 8000af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af8:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL)
 8000afa:	bf00      	nop
 8000afc:	4b54      	ldr	r3, [pc, #336]	; (8000c50 <ADC12_Init+0x224>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dbfb      	blt.n	8000afc <ADC12_Init+0xd0>
		;
	// Configure for single-ended mode on channel 5 must be set before enabling the ADC1
	// Using ADC12_IN5 channel
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 8000b04:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <ADC12_Init+0x224>)
 8000b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000b0a:	4a51      	ldr	r2, [pc, #324]	; (8000c50 <ADC12_Init+0x224>)
 8000b0c:	f023 0320 	bic.w	r3, r3, #32
 8000b10:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	// Enable ADC1
	// Clear ready bit with a 1
	ADC1->ISR |= (ADC_ISR_ADRDY);
 8000b14:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <ADC12_Init+0x224>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <ADC12_Init+0x224>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]
	// Enable ADC
	ADC1->CR |= ADC_CR_ADEN;
 8000b20:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <ADC12_Init+0x224>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <ADC12_Init+0x224>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY))
 8000b2c:	bf00      	nop
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <ADC12_Init+0x224>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f9      	beq.n	8000b2e <ADC12_Init+0x102>
		;
	// Clear ready bit with a 1 (optional)
	ADC1->ISR |= (ADC_ISR_ADRDY);
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <ADC12_Init+0x224>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <ADC12_Init+0x224>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]
	// Configure ADC1
	// set sequence for 1 conversion on channel 5
	ADC1->SQR1 |= (5 << ADC_SQR1_SQ1_Pos);
 8000b46:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <ADC12_Init+0x224>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a41      	ldr	r2, [pc, #260]	; (8000c50 <ADC12_Init+0x224>)
 8000b4c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
	// 12 bit resolution, software trigger, right align, single conversion
	ADC1->CFGR = 0;
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <ADC12_Init+0x224>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
	// Used to change sampling rate -> ADC1->SMPR1 = (SMP_640_5 << ADC_SMPR1_SMP5_Pos);

	/*--------------- Set up ADC2 Here --------------*/
	ADC2->CR &= ~(ADC_CR_DEEPPWD);
 8000b58:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <ADC12_Init+0x228>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <ADC12_Init+0x228>)
 8000b5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b62:	6093      	str	r3, [r2, #8]
	ADC2->CR |= (ADC_CR_ADVREGEN);
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <ADC12_Init+0x228>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <ADC12_Init+0x228>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6093      	str	r3, [r2, #8]
	// delay for voltage regulation startup time ~ 20 us
	for (uint32_t i = 0; i < DELAY_TIME; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e002      	b.n	8000b7c <ADC12_Init+0x150>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f5b3 6f7b 	cmp.w	r3, #4016	; 0xfb0
 8000b82:	d3f8      	bcc.n	8000b76 <ADC12_Init+0x14a>
		;
	// Calibrate ADC2 and ensure ADC2 is disabled and single-ended mode
	ADC2->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <ADC12_Init+0x228>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <ADC12_Init+0x228>)
 8000b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000b8e:	f023 0301 	bic.w	r3, r3, #1
 8000b92:	6093      	str	r3, [r2, #8]
	// Configure for single-ended mode on channel 6 must be set befor ennable the ADC2
	// Using ADC12_IN6 channel
	ADC2->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_6);
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <ADC12_Init+0x228>)
 8000b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000b9a:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <ADC12_Init+0x228>)
 8000b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ba0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	// Enable ADC2
	// Clear ready bit with a 1
	ADC2->ISR |= (ADC_ISR_ADRDY);
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <ADC12_Init+0x228>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	; (8000c54 <ADC12_Init+0x228>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]
	// Enable ADC
	ADC2->CR |= ADC_CR_ADEN;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <ADC12_Init+0x228>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <ADC12_Init+0x228>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6093      	str	r3, [r2, #8]
	while (!(ADC2->ISR & ADC_ISR_ADRDY))
 8000bbc:	bf00      	nop
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <ADC12_Init+0x228>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f9      	beq.n	8000bbe <ADC12_Init+0x192>
		;
	// Clear ready bit with a 1 (optional)
	ADC2->ISR |= (ADC_ISR_ADRDY);
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <ADC12_Init+0x228>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <ADC12_Init+0x228>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]
	// Set sequence for 1 conversion on channel 6
	ADC2->SQR1 |= (6 << ADC_SQR1_SQ1_Pos);
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <ADC12_Init+0x228>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <ADC12_Init+0x228>)
 8000bdc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
	// 12 bit resolution, software trigger, right align, single conversion
	ADC2->CFGR = 0;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <ADC12_Init+0x228>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]

	// Start conversion
	ADC1->CR |= (ADC_CR_ADSTART);
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <ADC12_Init+0x224>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <ADC12_Init+0x224>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6093      	str	r3, [r2, #8]
	ADC2->CR |= (ADC_CR_ADSTART);
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <ADC12_Init+0x228>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <ADC12_Init+0x228>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6093      	str	r3, [r2, #8]
	// Enable interrupts for ADC
	// Interrupt on end of conversion
	ADC1->IER |= (ADC_IER_EOC);
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <ADC12_Init+0x224>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <ADC12_Init+0x224>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6053      	str	r3, [r2, #4]
	// Clear EOC flag with 1
	ADC1->ISR &= ~(ADC_ISR_EOC);
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <ADC12_Init+0x224>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <ADC12_Init+0x224>)
 8000c12:	f023 0304 	bic.w	r3, r3, #4
 8000c16:	6013      	str	r3, [r2, #0]
	// Interrupt on end of conversion
	ADC2->IER |= (ADC_IER_EOC);
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <ADC12_Init+0x228>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <ADC12_Init+0x228>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6053      	str	r3, [r2, #4]
	// Clear EOC flag with h2
	ADC2->ISR &= ~(ADC_ISR_EOC);
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <ADC12_Init+0x228>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <ADC12_Init+0x228>)
 8000c2a:	f023 0304 	bic.w	r3, r3, #4
 8000c2e:	6013      	str	r3, [r2, #0]
	// Enable interrupt in NVIC
	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F));
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <ADC12_Init+0x22c>)
 8000c32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c36:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c38:	b662      	cpsie	i
}
 8000c3a:	bf00      	nop
	// Enable interrupts globally
	__enable_irq();
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	50040300 	.word	0x50040300
 8000c50:	50040000 	.word	0x50040000
 8000c54:	50040100 	.word	0x50040100
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <readJoystick>:
#include "joystick.h"
#include <stdint.h>
#include "main.h"

DIR readJoystick(uint16_t x, uint16_t y) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	80fb      	strh	r3, [r7, #6]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80bb      	strh	r3, [r7, #4]
	DIR ret = NONE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

	if (y > 3500) {
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d902      	bls.n	8000c80 <readJoystick+0x24>
		ret = DOWN;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e014      	b.n	8000caa <readJoystick+0x4e>
	} else if (y < 500) {
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c86:	d202      	bcs.n	8000c8e <readJoystick+0x32>
		ret = UP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e00d      	b.n	8000caa <readJoystick+0x4e>
	} else if (x < 500) {
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c94:	d202      	bcs.n	8000c9c <readJoystick+0x40>
		ret = LEFT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e006      	b.n	8000caa <readJoystick+0x4e>
	} else if (x > 3500) {
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d901      	bls.n	8000caa <readJoystick+0x4e>
		ret = RIGHT;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <startJoystickRead>:

void startJoystickRead(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTART;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <startJoystickRead+0x28>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <startJoystickRead+0x28>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADSTART;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <startJoystickRead+0x2c>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <startJoystickRead+0x2c>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6093      	str	r3, [r2, #8]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	50040000 	.word	0x50040000
 8000ce4:	50040100 	.word	0x50040100

08000ce8 <checkJoystickComplete>:

int8_t checkJoystickComplete(uint16_t adc1_ready, uint16_t adc2_ready) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	80fb      	strh	r3, [r7, #6]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
	if (adc1_ready && adc2_ready) {
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d008      	beq.n	8000d10 <checkJoystickComplete+0x28>
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <checkJoystickComplete+0x28>
		adc1_ready = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	80fb      	strh	r3, [r7, #6]
		adc2_ready = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	80bb      	strh	r3, [r7, #4]
		return 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e001      	b.n	8000d14 <checkJoystickComplete+0x2c>
	}
	return -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <setupJoystickButton>:

void setupJoystickButton(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	// Turn on the clock for GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <setupJoystickButton+0x40>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <setupJoystickButton+0x40>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
    // Set MODE to input
	GPIOC->MODER &= ~(GPIO_MODER_MODE0); 		
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <setupJoystickButton+0x44>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <setupJoystickButton+0x44>)
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	6013      	str	r3, [r2, #0]
    // Set PUPD to Pull Up
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0); 		
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <setupJoystickButton+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <setupJoystickButton+0x44>)
 8000d42:	f023 0303 	bic.w	r3, r3, #3
 8000d46:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (1 << GPIO_PUPDR_PUPD0_Pos);
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <setupJoystickButton+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <setupJoystickButton+0x44>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000800 	.word	0x48000800

08000d68 <detectButtonPress>:

int8_t detectButtonPress(void) {
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	if ((GPIOC->IDR  & GPIO_IDR_ID0) == 0) {
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <detectButtonPress+0x24>)
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <detectButtonPress+0x14>
		return 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e001      	b.n	8000d80 <detectButtonPress+0x18>

	} else {
		return -1;
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	48000800 	.word	0x48000800

08000d90 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b090      	sub	sp, #64	; 0x40
 8000d94:	af00      	add	r7, sp, #0
	//initialize random number generator
//	srand(time(NULL));

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d96:	f000 fc99 	bl	80016cc <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000d9a:	f000 f955 	bl	8001048 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d9e:	f000 fa45 	bl	800122c <MX_GPIO_Init>
	MX_DMA_Init();
 8000da2:	f000 fa25 	bl	80011f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000da6:	f000 f9f3 	bl	8001190 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000daa:	f000 f9b3 	bl	8001114 <MX_SPI1_Init>
	MX_RNG_Init();
 8000dae:	f000 f99d 	bl	80010ec <MX_RNG_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 8000db2:	f7ff fc25 	bl	8000600 <ILI9341_Init>
	//ILI9341_setBackLight(1);
	ADC12_Init();
 8000db6:	f7ff fe39 	bl	8000a2c <ADC12_Init>
	setupJoystickButton();
 8000dba:	f7ff ffb1 	bl	8000d20 <setupJoystickButton>

	//keep track of state in state machine
	STATE state = IDLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	//valid directions to choose from
	DIR options[4] = { UP, DOWN, LEFT, RIGHT };
 8000dc4:	4b7c      	ldr	r3, [pc, #496]	; (8000fb8 <main+0x228>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34

	//keep track of solutions thus far
	DIR cache[50];

	uint8_t cnt = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	while (1) {

		switch (state) {
 8000dd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	f200 80ed 	bhi.w	8000fb4 <main+0x224>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <main+0x50>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df9 	.word	0x08000df9
 8000de4:	08000e1b 	.word	0x08000e1b
 8000de8:	08000e49 	.word	0x08000e49
 8000dec:	08000e93 	.word	0x08000e93
 8000df0:	08000f67 	.word	0x08000f67
 8000df4:	08000f8d 	.word	0x08000f8d

		//do nothing state, wait for button press
		case IDLE: {
			state = GENERATE;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			displayEmpty();
 8000dfe:	f7ff fdd9 	bl	80009b4 <displayEmpty>

			//wait for btn press to move one
			while (detectButtonPress() == -1)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffb0 	bl	8000d68 <detectButtonPress>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e0e:	d0f9      	beq.n	8000e04 <main+0x74>
				;
			HAL_Delay(400);
 8000e10:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e14:	f000 fcd6 	bl	80017c4 <HAL_Delay>
			break;
 8000e18:	e0cd      	b.n	8000fb6 <main+0x226>
		}

			//generate next random direction
		case GENERATE: {
			cache[cnt] = options[RNG->DR & 0x3];
 8000e1a:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <main+0x22c>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 0203 	and.w	r2, r3, #3
 8000e22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e26:	3240      	adds	r2, #64	; 0x40
 8000e28:	443a      	add	r2, r7
 8000e2a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000e2e:	3340      	adds	r3, #64	; 0x40
 8000e30:	443b      	add	r3, r7
 8000e32:	f803 2c40 	strb.w	r2, [r3, #-64]
			state = DISPLAY;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			cnt++;
 8000e3c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e40:	3301      	adds	r3, #1
 8000e42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			break;
 8000e46:	e0b6      	b.n	8000fb6 <main+0x226>
		}

			//display pattern to mimic
		case DISPLAY: {
			for (uint8_t i = 0; i < cnt; i++) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000e4e:	e016      	b.n	8000e7e <main+0xee>
				displayDir(cache[i]);
 8000e50:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000e54:	3340      	adds	r3, #64	; 0x40
 8000e56:	443b      	add	r3, r7
 8000e58:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd19 	bl	8000894 <displayDir>
				HAL_Delay(500);
 8000e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e66:	f000 fcad 	bl	80017c4 <HAL_Delay>
				displayEmpty();
 8000e6a:	f7ff fda3 	bl	80009b4 <displayEmpty>
				HAL_Delay(50);
 8000e6e:	2032      	movs	r0, #50	; 0x32
 8000e70:	f000 fca8 	bl	80017c4 <HAL_Delay>
			for (uint8_t i = 0; i < cnt; i++) {
 8000e74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000e7e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000e82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3e2      	bcc.n	8000e50 <main+0xc0>
			}
			state = READ;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e90:	e091      	b.n	8000fb6 <main+0x226>
		}

			//read user input and compare to solution
		case READ: {
			//read user inputs equal to current level
			displayEmpty();
 8000e92:	f7ff fd8f 	bl	80009b4 <displayEmpty>
			uint8_t i = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			while (i < cnt) {
 8000e9c:	e05c      	b.n	8000f58 <main+0x1c8>

				//read joystick value
				adc1_value = 1900;
 8000e9e:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <main+0x230>)
 8000ea0:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ea4:	801a      	strh	r2, [r3, #0]
				adc2_value = 1900;	//reset add values
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <main+0x234>)
 8000ea8:	f240 726c 	movw	r2, #1900	; 0x76c
 8000eac:	801a      	strh	r2, [r3, #0]
				//wait for valid joystick read
				while (readJoystick(adc1_value, adc2_value) == NONE) {
 8000eae:	e011      	b.n	8000ed4 <main+0x144>
					startJoystickRead();
 8000eb0:	f7ff ff02 	bl	8000cb8 <startJoystickRead>
					while (!checkJoystickComplete(adc1_ready, adc2_ready))
 8000eb4:	bf00      	nop
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <main+0x238>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4a43      	ldr	r2, [pc, #268]	; (8000fcc <main+0x23c>)
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff0d 	bl	8000ce8 <checkJoystickComplete>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <main+0x126>
				while (readJoystick(adc1_value, adc2_value) == NONE) {
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <main+0x230>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <main+0x234>)
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff feba 	bl	8000c5c <readJoystick>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0e0      	beq.n	8000eb0 <main+0x120>
						;
				}
				DIR dir = readJoystick(adc1_value, adc2_value);
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <main+0x230>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <main+0x234>)
 8000ef6:	8812      	ldrh	r2, [r2, #0]
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fead 	bl	8000c5c <readJoystick>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

				displayDir(dir);
 8000f08:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fcc1 	bl	8000894 <displayDir>
				HAL_Delay(500);
 8000f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f16:	f000 fc55 	bl	80017c4 <HAL_Delay>
				displayEmpty();
 8000f1a:	f7ff fd4b 	bl	80009b4 <displayEmpty>

				//if input not equal to answer game over
				if (dir != cache[i]) {
 8000f1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000f22:	3340      	adds	r3, #64	; 0x40
 8000f24:	443b      	add	r3, r7
 8000f26:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000f2a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d004      	beq.n	8000f3c <main+0x1ac>
					state = GAME_OVER;
 8000f32:	2304      	movs	r3, #4
 8000f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					break;
 8000f38:	bf00      	nop
					if (i == cnt) {
						state = PASS;
					}
				}
			}
			break;
 8000f3a:	e03c      	b.n	8000fb6 <main+0x226>
					i++;
 8000f3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000f40:	3301      	adds	r3, #1
 8000f42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					if (i == cnt) {
 8000f46:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000f4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d102      	bne.n	8000f58 <main+0x1c8>
						state = PASS;
 8000f52:	2305      	movs	r3, #5
 8000f54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			while (i < cnt) {
 8000f58:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000f5c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d39c      	bcc.n	8000e9e <main+0x10e>
			break;
 8000f64:	e027      	b.n	8000fb6 <main+0x226>
		} //end case

			//game over screen
		case GAME_OVER: {
			displayFail();
 8000f66:	f7ff fd4d 	bl	8000a04 <displayFail>
			state = IDLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			cnt = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

			//wait for btn press to move one
			while (detectButtonPress() == -1)
 8000f76:	bf00      	nop
 8000f78:	f7ff fef6 	bl	8000d68 <detectButtonPress>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f82:	d0f9      	beq.n	8000f78 <main+0x1e8>
				;
			HAL_Delay(200);
 8000f84:	20c8      	movs	r0, #200	; 0xc8
 8000f86:	f000 fc1d 	bl	80017c4 <HAL_Delay>
			break;
 8000f8a:	e014      	b.n	8000fb6 <main+0x226>
		}

			//pass level screeen
		case PASS: {
			displayPass();
 8000f8c:	f7ff fd26 	bl	80009dc <displayPass>
			state = GENERATE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			//reset if max count reached
			if (cnt == 50) {
 8000f96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f9a:	2b32      	cmp	r3, #50	; 0x32
 8000f9c:	d105      	bne.n	8000faa <main+0x21a>
				cnt = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				state = IDLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
			HAL_Delay(500);
 8000faa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fae:	f000 fc09 	bl	80017c4 <HAL_Delay>
			break;
 8000fb2:	e000      	b.n	8000fb6 <main+0x226>
		}

		default:
			break;
 8000fb4:	bf00      	nop
		switch (state) {
 8000fb6:	e70b      	b.n	8000dd0 <main+0x40>
 8000fb8:	08004f18 	.word	0x08004f18
 8000fbc:	50060800 	.word	0x50060800
 8000fc0:	2000016c 	.word	0x2000016c
 8000fc4:	20000170 	.word	0x20000170
 8000fc8:	2000016e 	.word	0x2000016e
 8000fcc:	20000172 	.word	0x20000172

08000fd0 <ADC1_2_IRQHandler>:
		} //end switch
	}
}

void ADC1_2_IRQHandler(void) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
	if (ADC1->ISR & ADC_ISR_EOC) {
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <ADC1_2_IRQHandler+0x60>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00d      	beq.n	8000ffc <ADC1_2_IRQHandler+0x2c>
		// Save the digital conversion to a global variable
		adc1_value = ADC1->DR;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <ADC1_2_IRQHandler+0x60>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <ADC1_2_IRQHandler+0x64>)
 8000fe8:	801a      	strh	r2, [r3, #0]
		// Set the global flag
		adc1_ready = 1;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <ADC1_2_IRQHandler+0x68>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
		// Clear the end of conversion flag
		ADC1->ISR &= ~(ADC_ISR_EOC);
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <ADC1_2_IRQHandler+0x60>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <ADC1_2_IRQHandler+0x60>)
 8000ff6:	f023 0304 	bic.w	r3, r3, #4
 8000ffa:	6013      	str	r3, [r2, #0]
	}

	if (ADC2->ISR & ADC_ISR_EOC) {
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <ADC1_2_IRQHandler+0x6c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00d      	beq.n	8001024 <ADC1_2_IRQHandler+0x54>
		// Save the digital conversion of ADC2 to a global variable
		adc2_value = ADC2->DR;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <ADC1_2_IRQHandler+0x6c>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <ADC1_2_IRQHandler+0x70>)
 8001010:	801a      	strh	r2, [r3, #0]
		// Set the global flag for ADC2
		adc2_ready = 1;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <ADC1_2_IRQHandler+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
		// Clear the end of conversion flag for ADC2
		ADC2->ISR &= ~(ADC_ISR_EOC);
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <ADC1_2_IRQHandler+0x6c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <ADC1_2_IRQHandler+0x6c>)
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	6013      	str	r3, [r2, #0]
	}
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	50040000 	.word	0x50040000
 8001034:	2000016c 	.word	0x2000016c
 8001038:	2000016e 	.word	0x2000016e
 800103c:	50040100 	.word	0x50040100
 8001040:	20000170 	.word	0x20000170
 8001044:	20000172 	.word	0x20000172

08001048 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b096      	sub	sp, #88	; 0x58
 800104c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2244      	movs	r2, #68	; 0x44
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 ff48 	bl	8004eec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800106a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800106e:	f001 f8e7 	bl	8002240 <HAL_PWREx_ControlVoltageScaling>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001078:	f000 f96c 	bl	8001354 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001086:	2310      	movs	r3, #16
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108e:	2302      	movs	r3, #2
 8001090:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001096:	230a      	movs	r3, #10
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800109a:	2307      	movs	r3, #7
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f91e 	bl	80022ec <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x72>
		Error_Handler();
 80010b6:	f000 f94d 	bl	8001354 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2303      	movs	r3, #3
 80010c0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80010ce:	463b      	mov	r3, r7
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fce6 	bl	8002aa4 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x9a>
		Error_Handler();
 80010de:	f000 f939 	bl	8001354 <Error_Handler>
	}
}
 80010e2:	bf00      	nop
 80010e4:	3758      	adds	r7, #88	; 0x58
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_RNG_Init+0x20>)
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <MX_RNG_Init+0x24>)
 80010f4:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_RNG_Init+0x20>)
 80010f8:	f002 fbb4 	bl	8003864 <HAL_RNG_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_RNG_Init+0x1a>
		Error_Handler();
 8001102:	f000 f927 	bl	8001354 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000002c 	.word	0x2000002c
 8001110:	50060800 	.word	0x50060800

08001114 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_SPI1_Init+0x74>)
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <MX_SPI1_Init+0x78>)
 800111c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_SPI1_Init+0x74>)
 8001120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001124:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_SPI1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_SPI1_Init+0x74>)
 800112e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001132:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_SPI1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_SPI1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_SPI1_Init+0x74>)
 8001142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001146:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_SPI1_Init+0x74>)
 800114a:	2208      	movs	r2, #8
 800114c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_SPI1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_SPI1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_SPI1_Init+0x74>)
 8001162:	2207      	movs	r2, #7
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_SPI1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_SPI1_Init+0x74>)
 8001174:	f002 fbcd 	bl	8003912 <HAL_SPI_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800117e:	f000 f8e9 	bl	8001354 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000003c 	.word	0x2000003c
 800118c:	40013000 	.word	0x40013000

08001190 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <MX_USART2_UART_Init+0x5c>)
 8001198:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_USART2_UART_Init+0x58>)
 80011d4:	f003 f9b0 	bl	8004538 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80011de:	f000 f8b9 	bl	8001354 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200000e8 	.word	0x200000e8
 80011ec:	40004400 	.word	0x40004400

080011f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_DMA_Init+0x38>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <MX_DMA_Init+0x38>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6493      	str	r3, [r2, #72]	; 0x48
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_DMA_Init+0x38>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	200d      	movs	r0, #13
 8001214:	f000 fbd5 	bl	80019c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001218:	200d      	movs	r0, #13
 800121a:	f000 fbee 	bl	80019fa <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a40      	ldr	r2, [pc, #256]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MX_GPIO_Init+0x11c>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a34      	ldr	r2, [pc, #208]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MX_GPIO_Init+0x11c>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_GPIO_Init+0x11c>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin,
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_GPIO_Init+0x120>)
 80012aa:	f000 ffa3 	bl	80021f4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b4:	4825      	ldr	r0, [pc, #148]	; (800134c <MX_GPIO_Init+0x120>)
 80012b6:	f000 ff9d 	bl	80021f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f000 ff96 	bl	80021f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	481c      	ldr	r0, [pc, #112]	; (8001350 <MX_GPIO_Init+0x124>)
 80012e0:	f000 fdde 	bl	8001ea0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BACKLIGHT_Pin */
	GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 80012e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_GPIO_Init+0x120>)
 80012fe:	f000 fdcf 	bl	8001ea0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_GPIO_Init+0x120>)
 800131c:	f000 fdc0 	bl	8001ea0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_RESET_Pin | LCD_DC_Pin;
 8001320:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001324:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132a:	2301      	movs	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f000 fdb0 	bl	8001ea0 <HAL_GPIO_Init>

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800

08001354 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800135c:	e7fe      	b.n	800135c <Error_Handler+0x8>
	...

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x44>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_MspInit+0x44>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6613      	str	r3, [r2, #96]	; 0x60
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x44>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x44>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x44>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x44>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0a6      	sub	sp, #152	; 0x98
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2288      	movs	r2, #136	; 0x88
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd97 	bl	8004eec <memset>
  if(hrng->Instance==RNG)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_RNG_MspInit+0x80>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d12b      	bne.n	8001420 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80013c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80013ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80013de:	2308      	movs	r3, #8
 80013e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013e2:	2307      	movs	r3, #7
 80013e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80013e6:	2304      	movs	r3, #4
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fd77 	bl	8002eec <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001404:	f7ff ffa6 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_RNG_MspInit+0x84>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_RNG_MspInit+0x84>)
 800140e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_RNG_MspInit+0x84>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3798      	adds	r7, #152	; 0x98
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	50060800 	.word	0x50060800
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_SPI_MspInit+0xe0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d15a      	bne.n	8001508 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_SPI_MspInit+0xe4>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001482:	23e0      	movs	r3, #224	; 0xe0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f000 fcfe 	bl	8001ea0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014a6:	4a1d      	ldr	r2, [pc, #116]	; (800151c <HAL_SPI_MspInit+0xec>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014dc:	480e      	ldr	r0, [pc, #56]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014de:	f000 faa7 	bl	8001a30 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80014e8:	f7ff ff34 	bl	8001354 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_SPI_MspInit+0xe8>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2023      	movs	r0, #35	; 0x23
 80014fe:	f000 fa60 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001502:	2023      	movs	r0, #35	; 0x23
 8001504:	f000 fa79 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013000 	.word	0x40013000
 8001514:	40021000 	.word	0x40021000
 8001518:	200000a0 	.word	0x200000a0
 800151c:	40020030 	.word	0x40020030

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ac      	sub	sp, #176	; 0xb0
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2288      	movs	r2, #136	; 0x88
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fcd3 	bl	8004eec <memset>
  if(huart->Instance==USART2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_UART_MspInit+0xb0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13b      	bne.n	80015c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001554:	2300      	movs	r3, #0
 8001556:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fcc5 	bl	8002eec <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001568:	f7ff fef4 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	6593      	str	r3, [r2, #88]	; 0x58
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159c:	230c      	movs	r3, #12
 800159e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b4:	2307      	movs	r3, #7
 80015b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c4:	f000 fc6c 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	37b0      	adds	r7, #176	; 0xb0
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40004400 	.word	0x40004400
 80015d4:	40021000 	.word	0x40021000

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f8ae 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Channel3_IRQHandler+0x10>)
 8001632:	f000 fb56 	bl	8001ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200000a0 	.word	0x200000a0

08001640 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <SPI1_IRQHandler+0x10>)
 8001646:	f002 fc69 	bl	8003f1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000003c 	.word	0x2000003c

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800167c:	f7ff ffea 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <LoopForever+0xe>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	; (80016c4 <LoopForever+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a6:	f003 fbfd 	bl	8004ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016aa:	f7ff fb71 	bl	8000d90 <main>

080016ae <LoopForever>:

LoopForever:
    b LoopForever
 80016ae:	e7fe      	b.n	80016ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016bc:	0809af74 	.word	0x0809af74
  ldr r2, =_sbss
 80016c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c4:	20000178 	.word	0x20000178

080016c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC3_IRQHandler>
	...

080016cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_Init+0x3c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_Init+0x3c>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e2:	2003      	movs	r0, #3
 80016e4:	f000 f962 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 f80f 	bl	800170c <HAL_InitTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	e001      	b.n	80016fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fa:	f7ff fe31 	bl	8001360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_InitTick+0x70>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_InitTick+0x6c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f96d 	bl	8001a16 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d809      	bhi.n	800175c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001750:	f000 f937 	bl	80019c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0x74>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e007      	b.n	800176c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e004      	b.n	800176c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e001      	b.n	800176c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000174 	.word	0x20000174

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000174 	.word	0x20000174

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff3e 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff31 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e098      	b.n	8001b74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_DMA_Init+0x150>)
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d80f      	bhi.n	8001a6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_DMA_Init+0x154>)
 8001a56:	4413      	add	r3, r2
 8001a58:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <HAL_DMA_Init+0x158>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	009a      	lsls	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_DMA_Init+0x15c>)
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6c:	e00e      	b.n	8001a8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <HAL_DMA_Init+0x160>)
 8001a76:	4413      	add	r3, r2
 8001a78:	4a43      	ldr	r2, [pc, #268]	; (8001b88 <HAL_DMA_Init+0x158>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	009a      	lsls	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <HAL_DMA_Init+0x164>)
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ae6:	d039      	beq.n	8001b5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <HAL_DMA_Init+0x15c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11a      	bne.n	8001b28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_DMA_Init+0x168>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f003 031c 	and.w	r3, r3, #28
 8001afe:	210f      	movs	r1, #15
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4924      	ldr	r1, [pc, #144]	; (8001b98 <HAL_DMA_Init+0x168>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_DMA_Init+0x168>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f003 031c 	and.w	r3, r3, #28
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	491d      	ldr	r1, [pc, #116]	; (8001b98 <HAL_DMA_Init+0x168>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
 8001b26:	e019      	b.n	8001b5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_DMA_Init+0x16c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f003 031c 	and.w	r3, r3, #28
 8001b34:	210f      	movs	r1, #15
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4917      	ldr	r1, [pc, #92]	; (8001b9c <HAL_DMA_Init+0x16c>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_DMA_Init+0x16c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6859      	ldr	r1, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 031c 	and.w	r3, r3, #28
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	4911      	ldr	r1, [pc, #68]	; (8001b9c <HAL_DMA_Init+0x16c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40020407 	.word	0x40020407
 8001b84:	bffdfff8 	.word	0xbffdfff8
 8001b88:	cccccccd 	.word	0xcccccccd
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	bffdfbf8 	.word	0xbffdfbf8
 8001b94:	40020400 	.word	0x40020400
 8001b98:	400200a8 	.word	0x400200a8
 8001b9c:	400204a8 	.word	0x400204a8

08001ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Start_IT+0x20>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e04b      	b.n	8001c58 <HAL_DMA_Start_IT+0xb8>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d13a      	bne.n	8001c4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f921 	bl	8001e40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 020e 	orr.w	r2, r2, #14
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e00f      	b.n	8001c38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 020a 	orr.w	r2, r2, #10
 8001c36:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e005      	b.n	8001c56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d005      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e029      	b.n	8001cd8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 020e 	bic.w	r2, r2, #14
 8001c92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	f003 021c 	and.w	r2, r3, #28
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
    }
  }
  return status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f003 031c 	and.w	r3, r3, #28
 8001d02:	2204      	movs	r2, #4
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d026      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7a>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d021      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0204 	bic.w	r2, r2, #4
 8001d34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f003 021c 	and.w	r2, r3, #28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2104      	movs	r1, #4
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d071      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001d5a:	e06c      	b.n	8001e36 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f003 031c 	and.w	r3, r3, #28
 8001d64:	2202      	movs	r2, #2
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d02e      	beq.n	8001dce <HAL_DMA_IRQHandler+0xec>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d029      	beq.n	8001dce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020a 	bic.w	r2, r2, #10
 8001d96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f003 021c 	and.w	r2, r3, #28
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2102      	movs	r1, #2
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d038      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001dcc:	e033      	b.n	8001e36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f003 031c 	and.w	r3, r3, #28
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x156>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d025      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020e 	bic.w	r2, r2, #14
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f003 021c 	and.w	r2, r3, #28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
}
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f003 021c 	and.w	r2, r3, #28
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d108      	bne.n	8001e84 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e82:	e007      	b.n	8001e94 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e17f      	b.n	80021b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8171 	beq.w	80021aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d118      	bne.n	8001f80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80ac 	beq.w	80021aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	4a5e      	ldr	r2, [pc, #376]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6613      	str	r3, [r2, #96]	; 0x60
 800205e:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206a:	4a5a      	ldr	r2, [pc, #360]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002094:	d025      	beq.n	80020e2 <HAL_GPIO_Init+0x242>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_GPIO_Init+0x338>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x23e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x33c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x23a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <HAL_GPIO_Init+0x340>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x236>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x344>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x232>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_GPIO_Init+0x348>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x22e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x34c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x22a>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020ca:	2307      	movs	r3, #7
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x244>
 80020e2:	2300      	movs	r3, #0
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020f4:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_GPIO_Init+0x334>)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_GPIO_Init+0x350>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002126:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <HAL_GPIO_Init+0x350>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_GPIO_Init+0x350>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002150:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_GPIO_Init+0x350>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_GPIO_Init+0x350>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_GPIO_Init+0x350>)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_GPIO_Init+0x350>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_GPIO_Init+0x350>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f47f ae78 	bne.w	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000c00 	.word	0x48000c00
 80021e4:	48001000 	.word	0x48001000
 80021e8:	48001400 	.word	0x48001400
 80021ec:	48001800 	.word	0x48001800
 80021f0:	40010400 	.word	0x40010400

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002210:	e002      	b.n	8002218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_PWREx_GetVoltageRange+0x18>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224e:	d130      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225c:	d038      	beq.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2232      	movs	r2, #50	; 0x32
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002284:	e002      	b.n	800228c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3b01      	subs	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002298:	d102      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f2      	bne.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ac:	d110      	bne.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e00f      	b.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022be:	d007      	beq.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40007000 	.word	0x40007000
 80022e4:	20000000 	.word	0x20000000
 80022e8:	431bde83 	.word	0x431bde83

080022ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e3ca      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fe:	4b97      	ldr	r3, [pc, #604]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002308:	4b94      	ldr	r3, [pc, #592]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80e4 	beq.w	80024e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_RCC_OscConfig+0x4a>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b0c      	cmp	r3, #12
 800232a:	f040 808b 	bne.w	8002444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b01      	cmp	r3, #1
 8002332:	f040 8087 	bne.w	8002444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002336:	4b89      	ldr	r3, [pc, #548]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e3a2      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1a      	ldr	r2, [r3, #32]
 8002352:	4b82      	ldr	r3, [pc, #520]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_RCC_OscConfig+0x7c>
 800235e:	4b7f      	ldr	r3, [pc, #508]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002366:	e005      	b.n	8002374 <HAL_RCC_OscConfig+0x88>
 8002368:	4b7c      	ldr	r3, [pc, #496]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002374:	4293      	cmp	r3, r2
 8002376:	d223      	bcs.n	80023c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fd55 	bl	8002e2c <RCC_SetFlashLatencyFromMSIRange>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e383      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238c:	4b73      	ldr	r3, [pc, #460]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a72      	ldr	r2, [pc, #456]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b70      	ldr	r3, [pc, #448]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	496d      	ldr	r1, [pc, #436]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023aa:	4b6c      	ldr	r3, [pc, #432]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	4968      	ldr	r1, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	e025      	b.n	800240c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c0:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a65      	ldr	r2, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023c6:	f043 0308 	orr.w	r3, r3, #8
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4960      	ldr	r1, [pc, #384]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023de:	4b5f      	ldr	r3, [pc, #380]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	495b      	ldr	r1, [pc, #364]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fd15 	bl	8002e2c <RCC_SetFlashLatencyFromMSIRange>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e343      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240c:	f000 fc4a 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b52      	ldr	r3, [pc, #328]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	4950      	ldr	r1, [pc, #320]	; (8002560 <HAL_RCC_OscConfig+0x274>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_RCC_OscConfig+0x278>)
 800242a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800242c:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <HAL_RCC_OscConfig+0x27c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f96b 	bl	800170c <HAL_InitTick>
 8002436:	4603      	mov	r3, r0
 8002438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d052      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	e327      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d032      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a42      	ldr	r2, [pc, #264]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002458:	f7ff f9a8 	bl	80017ac <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002460:	f7ff f9a4 	bl	80017ac <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e310      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002472:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a36      	ldr	r2, [pc, #216]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4931      	ldr	r1, [pc, #196]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	492c      	ldr	r1, [pc, #176]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e01a      	b.n	80024e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024be:	f7ff f975 	bl	80017ac <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c6:	f7ff f971 	bl	80017ac <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e2dd      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x1da>
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d074      	beq.n	80025de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x21a>
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d10e      	bne.n	800251e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d10b      	bne.n	800251e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d064      	beq.n	80025dc <HAL_RCC_OscConfig+0x2f0>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d160      	bne.n	80025dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e2ba      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x24a>
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e026      	b.n	8002584 <HAL_RCC_OscConfig+0x298>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253e:	d115      	bne.n	800256c <HAL_RCC_OscConfig+0x280>
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a02      	ldr	r2, [pc, #8]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x298>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	08004f1c 	.word	0x08004f1c
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004
 800256c:	4ba0      	ldr	r3, [pc, #640]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a9f      	ldr	r2, [pc, #636]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b9d      	ldr	r3, [pc, #628]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a9c      	ldr	r2, [pc, #624]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f90e 	bl	80017ac <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff f90a 	bl	80017ac <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e276      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	4b92      	ldr	r3, [pc, #584]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x2a8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff f8fa 	bl	80017ac <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff f8f6 	bl	80017ac <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e262      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x2d0>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d060      	beq.n	80026ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_OscConfig+0x310>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	d119      	bne.n	800262a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d116      	bne.n	800262a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	4b7c      	ldr	r3, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x328>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e23f      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	4973      	ldr	r1, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	e040      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d023      	beq.n	800267a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002632:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7ff f8b5 	bl	80017ac <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002646:	f7ff f8b1 	bl	80017ac <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e21d      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	495f      	ldr	r1, [pc, #380]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	e018      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5c      	ldr	r2, [pc, #368]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7ff f891 	bl	80017ac <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7ff f88d 	bl	80017ac <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1f9      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d03c      	beq.n	8002732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01c      	beq.n	80026fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c6:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7ff f86c 	bl	80017ac <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7ff f868 	bl	80017ac <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1d4      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <HAL_RCC_OscConfig+0x3ec>
 80026f8:	e01b      	b.n	8002732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff f84f 	bl	80017ac <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7ff f84b 	bl	80017ac <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1b7      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ef      	bne.n	8002712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80a6 	beq.w	800288c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCC_OscConfig+0x508>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d118      	bne.n	80027aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_OscConfig+0x508>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x508>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002784:	f7ff f812 	bl	80017ac <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7ff f80e 	bl	80017ac <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e17a      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x508>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4d8>
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c2:	e029      	b.n	8002818 <HAL_RCC_OscConfig+0x52c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d115      	bne.n	80027f8 <HAL_RCC_OscConfig+0x50c>
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ec:	e014      	b.n	8002818 <HAL_RCC_OscConfig+0x52c>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	4b9c      	ldr	r3, [pc, #624]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a9b      	ldr	r2, [pc, #620]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002808:	4b98      	ldr	r3, [pc, #608]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	4a97      	ldr	r2, [pc, #604]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe ffc4 	bl	80017ac <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe ffc0 	bl	80017ac <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e12a      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283e:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ed      	beq.n	8002828 <HAL_RCC_OscConfig+0x53c>
 800284c:	e015      	b.n	800287a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe ffad 	bl	80017ac <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe ffa9 	bl	80017ac <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e113      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800286c:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ed      	bne.n	8002856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b7a      	ldr	r3, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	4a79      	ldr	r2, [pc, #484]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80fe 	beq.w	8002a92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 80d0 	bne.w	8002a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028a0:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d130      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	3b01      	subs	r3, #1
 80028c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d127      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d11f      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e0:	2a07      	cmp	r2, #7
 80028e2:	bf14      	ite	ne
 80028e4:	2201      	movne	r2, #1
 80028e6:	2200      	moveq	r2, #0
 80028e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d113      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d109      	bne.n	8002916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	3b01      	subs	r3, #1
 8002910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d06e      	beq.n	80029f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d069      	beq.n	80029f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800291c:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0ad      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002938:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7fe ff32 	bl	80017ac <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe ff2e 	bl	80017ac <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e09a      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_RCC_OscConfig+0x784>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800297a:	3a01      	subs	r2, #1
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002984:	0212      	lsls	r2, r2, #8
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800298c:	0852      	lsrs	r2, r2, #1
 800298e:	3a01      	subs	r2, #1
 8002990:	0552      	lsls	r2, r2, #21
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002998:	0852      	lsrs	r2, r2, #1
 800299a:	3a01      	subs	r2, #1
 800299c:	0652      	lsls	r2, r2, #25
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029a4:	0912      	lsrs	r2, r2, #4
 80029a6:	0452      	lsls	r2, r2, #17
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4930      	ldr	r1, [pc, #192]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c8:	f7fe fef0 	bl	80017ac <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe feec 	bl	80017ac <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e058      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ee:	e050      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e04f      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d148      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a18:	f7fe fec8 	bl	80017ac <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fec4 	bl	80017ac <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e030      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x734>
 8002a3e:	e028      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d023      	beq.n	8002a8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_RCC_OscConfig+0x780>)
 8002a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe feab 	bl	80017ac <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	e00c      	b.n	8002a74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fea7 	bl	80017ac <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d905      	bls.n	8002a74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_OscConfig+0x7b0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ec      	bne.n	8002a5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_OscConfig+0x7b0>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	4905      	ldr	r1, [pc, #20]	; (8002a9c <HAL_RCC_OscConfig+0x7b0>)
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_OscConfig+0x7b4>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
 8002a8c:	e001      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	feeefffc 	.word	0xfeeefffc

08002aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0e7      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4970      	ldr	r1, [pc, #448]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b6e      	ldr	r3, [pc, #440]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0cf      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d908      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4960      	ldr	r1, [pc, #384]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04c      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0a6      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d115      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e09a      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5a:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e08e      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e086      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4943      	ldr	r1, [pc, #268]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fe0e 	bl	80017ac <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe fe0a 	bl	80017ac <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e06e      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d208      	bcs.n	8002bea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	492b      	ldr	r1, [pc, #172]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d210      	bcs.n	8002c1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0207 	bic.w	r2, r3, #7
 8002c00:	4923      	ldr	r1, [pc, #140]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e036      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4918      	ldr	r1, [pc, #96]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4910      	ldr	r1, [pc, #64]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c58:	f000 f824 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	490b      	ldr	r1, [pc, #44]	; (8002c98 <HAL_RCC_ClockConfig+0x1f4>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1f8>)
 8002c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fd45 	bl	800170c <HAL_InitTick>
 8002c82:	4603      	mov	r3, r0
 8002c84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c86:	7afb      	ldrb	r3, [r7, #11]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08004f1c 	.word	0x08004f1c
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d121      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d11e      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d00:	4a2b      	ldr	r2, [pc, #172]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e004      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d134      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d003      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0xac>
 8002d48:	e005      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d4c:	617b      	str	r3, [r7, #20]
      break;
 8002d4e:	e005      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d52:	617b      	str	r3, [r7, #20]
      break;
 8002d54:	e002      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	617b      	str	r3, [r7, #20]
      break;
 8002d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	3301      	adds	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	fb03 f202 	mul.w	r2, r3, r2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	0e5b      	lsrs	r3, r3, #25
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08004f34 	.word	0x08004f34
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dd8:	f7ff fff0 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08004f2c 	.word	0x08004f2c

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e04:	f7ff ffda 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0adb      	lsrs	r3, r3, #11
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4904      	ldr	r1, [pc, #16]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08004f2c 	.word	0x08004f2c

08002e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e44:	f7ff f9ee 	bl	8002224 <HAL_PWREx_GetVoltageRange>
 8002e48:	6178      	str	r0, [r7, #20]
 8002e4a:	e014      	b.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	; 0x58
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e64:	f7ff f9de 	bl	8002224 <HAL_PWREx_GetVoltageRange>
 8002e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7c:	d10b      	bne.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d919      	bls.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2ba0      	cmp	r3, #160	; 0xa0
 8002e88:	d902      	bls.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	e013      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e90:	2301      	movs	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	e010      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d902      	bls.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	e00a      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d102      	bne.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e004      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b70      	cmp	r3, #112	; 0x70
 8002eb2:	d101      	bne.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 0207 	bic.w	r2, r3, #7
 8002ec0:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ef8:	2300      	movs	r3, #0
 8002efa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d041      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f10:	d02a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f16:	d824      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f22:	d81e      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f2e:	e018      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f30:	4b86      	ldr	r3, [pc, #536]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a85      	ldr	r2, [pc, #532]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3c:	e015      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fabb 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f4e:	e00c      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3320      	adds	r3, #32
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fba6 	bl	80036a8 <RCCEx_PLLSAI2_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	74fb      	strb	r3, [r7, #19]
      break;
 8002f66:	e000      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f70:	4b76      	ldr	r3, [pc, #472]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7e:	4973      	ldr	r1, [pc, #460]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f86:	e001      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d041      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fa6:	d824      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fb2:	d81e      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fbe:	e018      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc0:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a61      	ldr	r2, [pc, #388]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fcc:	e015      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa73 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fde:	e00c      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fb5e 	bl	80036a8 <RCCEx_PLLSAI2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003000:	4b52      	ldr	r3, [pc, #328]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300e:	494f      	ldr	r1, [pc, #316]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003016:	e001      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a0 	beq.w	800316a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003044:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	4a40      	ldr	r2, [pc, #256]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304e:	6593      	str	r3, [r2, #88]	; 0x58
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305c:	2301      	movs	r3, #1
 800305e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003060:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800306c:	f7fe fb9e 	bl	80017ac <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003072:	e009      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003074:	f7fe fb9a 	bl	80017ac <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	74fb      	strb	r3, [r7, #19]
        break;
 8003086:	e005      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d15c      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800309a:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01f      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d019      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4a20      	ldr	r2, [pc, #128]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fb59 	bl	80017ac <HAL_GetTick>
 80030fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fc:	e00b      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fb55 	bl	80017ac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d902      	bls.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	74fb      	strb	r3, [r7, #19]
            break;
 8003114:	e006      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ec      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312a:	4b08      	ldr	r3, [pc, #32]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313a:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003142:	e009      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003158:	7c7b      	ldrb	r3, [r7, #17]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315e:	4b9e      	ldr	r3, [pc, #632]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	4a9d      	ldr	r2, [pc, #628]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003168:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003176:	4b98      	ldr	r3, [pc, #608]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 0203 	bic.w	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	4994      	ldr	r1, [pc, #592]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003198:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 020c 	bic.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	498c      	ldr	r1, [pc, #560]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ba:	4b87      	ldr	r3, [pc, #540]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	4983      	ldr	r1, [pc, #524]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031dc:	4b7e      	ldr	r3, [pc, #504]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	497b      	ldr	r1, [pc, #492]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	4972      	ldr	r1, [pc, #456]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003220:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	496a      	ldr	r1, [pc, #424]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	4961      	ldr	r1, [pc, #388]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003264:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	4959      	ldr	r1, [pc, #356]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	4950      	ldr	r1, [pc, #320]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032a8:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	4948      	ldr	r1, [pc, #288]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	493f      	ldr	r1, [pc, #252]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d028      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	4937      	ldr	r1, [pc, #220]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800330a:	d106      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003316:	60d3      	str	r3, [r2, #12]
 8003318:	e011      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003322:	d10c      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f8c8 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d028      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	491f      	ldr	r1, [pc, #124]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003368:	d106      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003374:	60d3      	str	r3, [r2, #12]
 8003376:	e011      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f899 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d02b      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b6:	4908      	ldr	r1, [pc, #32]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c6:	d109      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a02      	ldr	r2, [pc, #8]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
 80033d4:	e014      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f867 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02f      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800340c:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341a:	4928      	ldr	r1, [pc, #160]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800342a:	d10d      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	2102      	movs	r1, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f844 	bl	80034c0 <RCCEx_PLLSAI1_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d014      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	74bb      	strb	r3, [r7, #18]
 8003446:	e011      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003450:	d10c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3320      	adds	r3, #32
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f925 	bl	80036a8 <RCCEx_PLLSAI2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003486:	490d      	ldr	r1, [pc, #52]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034aa:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000

080034c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ce:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034da:	4b72      	ldr	r3, [pc, #456]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0203 	and.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d10d      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
       ||
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
       ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d047      	beq.n	8003596 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	e044      	b.n	8003596 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d018      	beq.n	8003546 <RCCEx_PLLSAI1_Config+0x86>
 8003514:	2b03      	cmp	r3, #3
 8003516:	d825      	bhi.n	8003564 <RCCEx_PLLSAI1_Config+0xa4>
 8003518:	2b01      	cmp	r3, #1
 800351a:	d002      	beq.n	8003522 <RCCEx_PLLSAI1_Config+0x62>
 800351c:	2b02      	cmp	r3, #2
 800351e:	d009      	beq.n	8003534 <RCCEx_PLLSAI1_Config+0x74>
 8003520:	e020      	b.n	8003564 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003522:	4b60      	ldr	r3, [pc, #384]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003532:	e01a      	b.n	800356a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003534:	4b5b      	ldr	r3, [pc, #364]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d116      	bne.n	800356e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003544:	e013      	b.n	800356e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003546:	4b57      	ldr	r3, [pc, #348]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003552:	4b54      	ldr	r3, [pc, #336]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003562:	e006      	b.n	8003572 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      break;
 8003568:	e004      	b.n	8003574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800356a:	bf00      	nop
 800356c:	e002      	b.n	8003574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800356e:	bf00      	nop
 8003570:	e000      	b.n	8003574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003572:	bf00      	nop
    }

    if(status == HAL_OK)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800357a:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	430b      	orrs	r3, r1
 8003590:	4944      	ldr	r1, [pc, #272]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d17d      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a8:	f7fe f900 	bl	80017ac <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ae:	e009      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b0:	f7fe f8fc 	bl	80017ac <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d902      	bls.n	80035c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	73fb      	strb	r3, [r7, #15]
        break;
 80035c2:	e005      	b.n	80035d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ef      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d160      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d111      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6892      	ldr	r2, [r2, #8]
 80035ec:	0211      	lsls	r1, r2, #8
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	0912      	lsrs	r2, r2, #4
 80035f4:	0452      	lsls	r2, r2, #17
 80035f6:	430a      	orrs	r2, r1
 80035f8:	492a      	ldr	r1, [pc, #168]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
 80035fe:	e027      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d112      	bne.n	800362c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800360e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	0211      	lsls	r1, r2, #8
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6912      	ldr	r2, [r2, #16]
 800361c:	0852      	lsrs	r2, r2, #1
 800361e:	3a01      	subs	r2, #1
 8003620:	0552      	lsls	r2, r2, #21
 8003622:	430a      	orrs	r2, r1
 8003624:	491f      	ldr	r1, [pc, #124]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
 800362a:	e011      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003634:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6892      	ldr	r2, [r2, #8]
 800363c:	0211      	lsls	r1, r2, #8
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6952      	ldr	r2, [r2, #20]
 8003642:	0852      	lsrs	r2, r2, #1
 8003644:	3a01      	subs	r2, #1
 8003646:	0652      	lsls	r2, r2, #25
 8003648:	430a      	orrs	r2, r1
 800364a:	4916      	ldr	r1, [pc, #88]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800365a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe f8a6 	bl	80017ac <HAL_GetTick>
 8003660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003662:	e009      	b.n	8003678 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003664:	f7fe f8a2 	bl	80017ac <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d902      	bls.n	8003678 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	73fb      	strb	r3, [r7, #15]
          break;
 8003676:	e005      	b.n	8003684 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ef      	beq.n	8003664 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	4904      	ldr	r1, [pc, #16]	; (80036a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003694:	4313      	orrs	r3, r2
 8003696:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000

080036a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036b6:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036c2:	4b67      	ldr	r3, [pc, #412]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d10d      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
       ||
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
       ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d047      	beq.n	800377e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e044      	b.n	800377e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d018      	beq.n	800372e <RCCEx_PLLSAI2_Config+0x86>
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d825      	bhi.n	800374c <RCCEx_PLLSAI2_Config+0xa4>
 8003700:	2b01      	cmp	r3, #1
 8003702:	d002      	beq.n	800370a <RCCEx_PLLSAI2_Config+0x62>
 8003704:	2b02      	cmp	r3, #2
 8003706:	d009      	beq.n	800371c <RCCEx_PLLSAI2_Config+0x74>
 8003708:	e020      	b.n	800374c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800370a:	4b55      	ldr	r3, [pc, #340]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11d      	bne.n	8003752 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371a:	e01a      	b.n	8003752 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e013      	b.n	8003756 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800373a:	4b49      	ldr	r3, [pc, #292]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800374a:	e006      	b.n	800375a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e004      	b.n	800375c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800375a:	bf00      	nop
    }

    if(status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	430b      	orrs	r3, r1
 8003778:	4939      	ldr	r1, [pc, #228]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d167      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a35      	ldr	r2, [pc, #212]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800378e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003790:	f7fe f80c 	bl	80017ac <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003796:	e009      	b.n	80037ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003798:	f7fe f808 	bl	80017ac <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d902      	bls.n	80037ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	73fb      	strb	r3, [r7, #15]
        break;
 80037aa:	e005      	b.n	80037b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ac:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ef      	bne.n	8003798 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d14a      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d111      	bne.n	80037e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037c4:	4b26      	ldr	r3, [pc, #152]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	0211      	lsls	r1, r2, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68d2      	ldr	r2, [r2, #12]
 80037da:	0912      	lsrs	r2, r2, #4
 80037dc:	0452      	lsls	r2, r2, #17
 80037de:	430a      	orrs	r2, r1
 80037e0:	491f      	ldr	r1, [pc, #124]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	614b      	str	r3, [r1, #20]
 80037e6:	e011      	b.n	800380c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	0211      	lsls	r1, r2, #8
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6912      	ldr	r2, [r2, #16]
 80037fe:	0852      	lsrs	r2, r2, #1
 8003800:	3a01      	subs	r2, #1
 8003802:	0652      	lsls	r2, r2, #25
 8003804:	430a      	orrs	r2, r1
 8003806:	4916      	ldr	r1, [pc, #88]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fd ffc8 	bl	80017ac <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003820:	f7fd ffc4 	bl	80017ac <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
          break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e049      	b.n	800390a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	795b      	ldrb	r3, [r3, #5]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fd8e 	bl	80013a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0204 	orr.w	r2, r2, #4
 80038a0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d104      	bne.n	80038ba <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2204      	movs	r2, #4
 80038b4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e027      	b.n	800390a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80038ba:	f7fd ff77 	bl	80017ac <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038c0:	e015      	b.n	80038ee <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80038c2:	f7fd ff73 	bl	80017ac <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d90e      	bls.n	80038ee <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d107      	bne.n	80038ee <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00d      	b.n	800390a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d0e2      	beq.n	80038c2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e095      	b.n	8003a50 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003934:	d009      	beq.n	800394a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	61da      	str	r2, [r3, #28]
 800393c:	e005      	b.n	800394a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fd fd63 	bl	8001430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003980:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800398a:	d902      	bls.n	8003992 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e002      	b.n	8003998 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003996:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039a0:	d007      	beq.n	80039b2 <HAL_SPI_Init+0xa0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039aa:	d002      	beq.n	80039b2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	ea42 0103 	orr.w	r1, r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0204 	and.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_SPI_Transmit+0x22>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e158      	b.n	8003d2c <HAL_SPI_Transmit+0x2d4>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a82:	f7fd fe93 	bl	80017ac <HAL_GetTick>
 8003a86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d002      	beq.n	8003a9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a9c:	e13d      	b.n	8003d1a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_Transmit+0x52>
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aae:	e134      	b.n	8003d1a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afa:	d10f      	bne.n	8003b1c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d007      	beq.n	8003b3a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b42:	d94b      	bls.n	8003bdc <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_SPI_Transmit+0xfa>
 8003b4c:	8afb      	ldrh	r3, [r7, #22]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d13e      	bne.n	8003bd0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	1c9a      	adds	r2, r3, #2
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b76:	e02b      	b.n	8003bd0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d112      	bne.n	8003bac <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003baa:	e011      	b.n	8003bd0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bac:	f7fd fdfe 	bl	80017ac <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d803      	bhi.n	8003bc4 <HAL_SPI_Transmit+0x16c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Transmit+0x172>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bce:	e0a4      	b.n	8003d1a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ce      	bne.n	8003b78 <HAL_SPI_Transmit+0x120>
 8003bda:	e07c      	b.n	8003cd6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_SPI_Transmit+0x192>
 8003be4:	8afb      	ldrh	r3, [r7, #22]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d170      	bne.n	8003ccc <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d912      	bls.n	8003c1a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b02      	subs	r3, #2
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c18:	e058      	b.n	8003ccc <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c40:	e044      	b.n	8003ccc <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d12b      	bne.n	8003ca8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d912      	bls.n	8003c80 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	1c9a      	adds	r2, r3, #2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b02      	subs	r3, #2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c7e:	e025      	b.n	8003ccc <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	7812      	ldrb	r2, [r2, #0]
 8003c8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca6:	e011      	b.n	8003ccc <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca8:	f7fd fd80 	bl	80017ac <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d803      	bhi.n	8003cc0 <HAL_SPI_Transmit+0x268>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cbe:	d102      	bne.n	8003cc6 <HAL_SPI_Transmit+0x26e>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cca:	e026      	b.n	8003d1a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1b5      	bne.n	8003c42 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fbe6 	bl	80044ac <SPI_EndRxTxTransaction>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e000      	b.n	8003d1a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_SPI_Transmit_DMA+0x20>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0d8      	b.n	8003f06 <HAL_SPI_Transmit_DMA+0x1d2>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d6c:	e0c6      	b.n	8003efc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_SPI_Transmit_DMA+0x46>
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d7e:	e0bd      	b.n	8003efc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2203      	movs	r2, #3
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	88fa      	ldrh	r2, [r7, #6]
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dca:	d10f      	bne.n	8003dec <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	4a47      	ldr	r2, [pc, #284]	; (8003f10 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <HAL_SPI_Transmit_DMA+0x1e0>)
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	4a45      	ldr	r2, [pc, #276]	; (8003f18 <HAL_SPI_Transmit_DMA+0x1e4>)
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	2200      	movs	r2, #0
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e1a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e24:	d82d      	bhi.n	8003e82 <HAL_SPI_Transmit_DMA+0x14e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e30:	d127      	bne.n	8003e82 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10f      	bne.n	8003e60 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e4e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5e:	e010      	b.n	8003e82 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e9a:	f7fd fe81 	bl	8001ba0 <HAL_DMA_Start_IT>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	f043 0210 	orr.w	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003ebc:	e01e      	b.n	8003efc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d007      	beq.n	8003edc <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0202 	orr.w	r2, r2, #2
 8003efa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	080041eb 	.word	0x080041eb
 8003f14:	08004145 	.word	0x08004145
 8003f18:	08004207 	.word	0x08004207

08003f1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
    return;
 8003f5e:	e0d7      	b.n	8004110 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_SPI_IRQHandler+0x66>
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	09db      	lsrs	r3, r3, #7
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
    return;
 8003f80:	e0c6      	b.n	8004110 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_SPI_IRQHandler+0x8c>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80b4 	beq.w	8004110 <HAL_SPI_IRQHandler+0x1f4>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80ad 	beq.w	8004110 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d023      	beq.n	800400a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d011      	beq.n	8003ff2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	e00b      	b.n	800400a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	693b      	ldr	r3, [r7, #16]
        return;
 8004008:	e082      	b.n	8004110 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004050:	f043 0208 	orr.w	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04f      	beq.n	800410e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800407c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_SPI_IRQHandler+0x17e>
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d034      	beq.n	8004104 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0203 	bic.w	r2, r2, #3
 80040a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d011      	beq.n	80040d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	4a18      	ldr	r2, [pc, #96]	; (8004118 <HAL_SPI_IRQHandler+0x1fc>)
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd fdce 	bl	8001c60 <HAL_DMA_Abort_IT>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	4a0d      	ldr	r2, [pc, #52]	; (8004118 <HAL_SPI_IRQHandler+0x1fc>)
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd fdb8 	bl	8001c60 <HAL_DMA_Abort_IT>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004102:	e003      	b.n	800410c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f813 	bl	8004130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800410a:	e000      	b.n	800410e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800410c:	bf00      	nop
    return;
 800410e:	bf00      	nop
  }
}
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	08004247 	.word	0x08004247

0800411c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004152:	f7fd fb2b 	bl	80017ac <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d03b      	beq.n	80041de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0220 	bic.w	r2, r2, #32
 8004174:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0202 	bic.w	r2, r2, #2
 8004184:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f000 f98e 	bl	80044ac <SPI_EndRxTxTransaction>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ffaa 	bl	8004130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80041dc:	e002      	b.n	80041e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80041de:	6978      	ldr	r0, [r7, #20]
 80041e0:	f7fc f974 	bl	80004cc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ff8f 	bl	800411c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0203 	bic.w	r2, r2, #3
 8004222:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	f043 0210 	orr.w	r2, r3, #16
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff ff79 	bl	8004130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff ff64 	bl	8004130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004280:	f7fd fa94 	bl	80017ac <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	4413      	add	r3, r2
 800428e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004290:	f7fd fa8c 	bl	80017ac <HAL_GetTick>
 8004294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	015b      	lsls	r3, r3, #5
 800429c:	0d1b      	lsrs	r3, r3, #20
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a6:	e054      	b.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ae:	d050      	beq.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042b0:	f7fd fa7c 	bl	80017ac <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d902      	bls.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d13d      	bne.n	8004342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042de:	d111      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d004      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f2:	d107      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430c:	d10f      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800432c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e017      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	429a      	cmp	r2, r3
 800436e:	d19b      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000000 	.word	0x20000000

08004380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004392:	f7fd fa0b 	bl	80017ac <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	4413      	add	r3, r2
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043a2:	f7fd fa03 	bl	80017ac <HAL_GetTick>
 80043a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043b0:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00da      	lsls	r2, r3, #3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	0d1b      	lsrs	r3, r3, #20
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043c8:	e060      	b.n	800448c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043d0:	d107      	bne.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e8:	d050      	beq.n	800448c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043ea:	f7fd f9df 	bl	80017ac <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d902      	bls.n	8004400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d13d      	bne.n	800447c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800440e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004418:	d111      	bne.n	800443e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004422:	d004      	beq.n	800442e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d107      	bne.n	800443e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004446:	d10f      	bne.n	8004468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e010      	b.n	800449e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3b01      	subs	r3, #1
 800448a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d196      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000000 	.word	0x20000000

080044ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff ff5b 	bl	8004380 <SPI_WaitFifoStateUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e027      	b.n	8004530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2200      	movs	r2, #0
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff fec0 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e014      	b.n	8004530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff ff34 	bl	8004380 <SPI_WaitFifoStateUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e000      	b.n	8004530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e040      	b.n	80045cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc ffe0 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f82c 	bl	80045d4 <UART_SetConfig>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e022      	b.n	80045cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fad8 	bl	8004b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fb5f 	bl	8004c88 <UART_CheckIdleState>
 80045ca:	4603      	mov	r3, r0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b08a      	sub	sp, #40	; 0x28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4ba4      	ldr	r3, [pc, #656]	; (8004894 <UART_SetConfig+0x2c0>)
 8004604:	4013      	ands	r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460c:	430b      	orrs	r3, r1
 800460e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a99      	ldr	r2, [pc, #612]	; (8004898 <UART_SetConfig+0x2c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	4313      	orrs	r3, r2
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a90      	ldr	r2, [pc, #576]	; (800489c <UART_SetConfig+0x2c8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d126      	bne.n	80046ac <UART_SetConfig+0xd8>
 800465e:	4b90      	ldr	r3, [pc, #576]	; (80048a0 <UART_SetConfig+0x2cc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	2b03      	cmp	r3, #3
 800466a:	d81b      	bhi.n	80046a4 <UART_SetConfig+0xd0>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0xa0>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004685 	.word	0x08004685
 8004678:	08004695 	.word	0x08004695
 800467c:	0800468d 	.word	0x0800468d
 8004680:	0800469d 	.word	0x0800469d
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e116      	b.n	80048ba <UART_SetConfig+0x2e6>
 800468c:	2302      	movs	r3, #2
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e112      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e10e      	b.n	80048ba <UART_SetConfig+0x2e6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e10a      	b.n	80048ba <UART_SetConfig+0x2e6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e106      	b.n	80048ba <UART_SetConfig+0x2e6>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7c      	ldr	r2, [pc, #496]	; (80048a4 <UART_SetConfig+0x2d0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d138      	bne.n	8004728 <UART_SetConfig+0x154>
 80046b6:	4b7a      	ldr	r3, [pc, #488]	; (80048a0 <UART_SetConfig+0x2cc>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d82d      	bhi.n	8004720 <UART_SetConfig+0x14c>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0xf8>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004721 	.word	0x08004721
 80046d4:	08004721 	.word	0x08004721
 80046d8:	08004721 	.word	0x08004721
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004721 	.word	0x08004721
 80046e4:	08004721 	.word	0x08004721
 80046e8:	08004721 	.word	0x08004721
 80046ec:	08004709 	.word	0x08004709
 80046f0:	08004721 	.word	0x08004721
 80046f4:	08004721 	.word	0x08004721
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004719 	.word	0x08004719
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e0d8      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e0d4      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e0d0      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e0cc      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e0c8      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a5e      	ldr	r2, [pc, #376]	; (80048a8 <UART_SetConfig+0x2d4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d125      	bne.n	800477e <UART_SetConfig+0x1aa>
 8004732:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800473c:	2b30      	cmp	r3, #48	; 0x30
 800473e:	d016      	beq.n	800476e <UART_SetConfig+0x19a>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d818      	bhi.n	8004776 <UART_SetConfig+0x1a2>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d00a      	beq.n	800475e <UART_SetConfig+0x18a>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d814      	bhi.n	8004776 <UART_SetConfig+0x1a2>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <UART_SetConfig+0x182>
 8004750:	2b10      	cmp	r3, #16
 8004752:	d008      	beq.n	8004766 <UART_SetConfig+0x192>
 8004754:	e00f      	b.n	8004776 <UART_SetConfig+0x1a2>
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475c:	e0ad      	b.n	80048ba <UART_SetConfig+0x2e6>
 800475e:	2302      	movs	r3, #2
 8004760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004764:	e0a9      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004766:	2304      	movs	r3, #4
 8004768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476c:	e0a5      	b.n	80048ba <UART_SetConfig+0x2e6>
 800476e:	2308      	movs	r3, #8
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004774:	e0a1      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004776:	2310      	movs	r3, #16
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477c:	e09d      	b.n	80048ba <UART_SetConfig+0x2e6>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a4a      	ldr	r2, [pc, #296]	; (80048ac <UART_SetConfig+0x2d8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d125      	bne.n	80047d4 <UART_SetConfig+0x200>
 8004788:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <UART_SetConfig+0x2cc>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004792:	2bc0      	cmp	r3, #192	; 0xc0
 8004794:	d016      	beq.n	80047c4 <UART_SetConfig+0x1f0>
 8004796:	2bc0      	cmp	r3, #192	; 0xc0
 8004798:	d818      	bhi.n	80047cc <UART_SetConfig+0x1f8>
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d00a      	beq.n	80047b4 <UART_SetConfig+0x1e0>
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d814      	bhi.n	80047cc <UART_SetConfig+0x1f8>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <UART_SetConfig+0x1d8>
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d008      	beq.n	80047bc <UART_SetConfig+0x1e8>
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x1f8>
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b2:	e082      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ba:	e07e      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c2:	e07a      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ca:	e076      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e072      	b.n	80048ba <UART_SetConfig+0x2e6>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a35      	ldr	r2, [pc, #212]	; (80048b0 <UART_SetConfig+0x2dc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d12a      	bne.n	8004834 <UART_SetConfig+0x260>
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <UART_SetConfig+0x2cc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ec:	d01a      	beq.n	8004824 <UART_SetConfig+0x250>
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f2:	d81b      	bhi.n	800482c <UART_SetConfig+0x258>
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d00c      	beq.n	8004814 <UART_SetConfig+0x240>
 80047fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fe:	d815      	bhi.n	800482c <UART_SetConfig+0x258>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <UART_SetConfig+0x238>
 8004804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004808:	d008      	beq.n	800481c <UART_SetConfig+0x248>
 800480a:	e00f      	b.n	800482c <UART_SetConfig+0x258>
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e052      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004814:	2302      	movs	r3, #2
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481a:	e04e      	b.n	80048ba <UART_SetConfig+0x2e6>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	e04a      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e046      	b.n	80048ba <UART_SetConfig+0x2e6>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e042      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	; (8004898 <UART_SetConfig+0x2c4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d13a      	bne.n	80048b4 <UART_SetConfig+0x2e0>
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <UART_SetConfig+0x2cc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800484c:	d01a      	beq.n	8004884 <UART_SetConfig+0x2b0>
 800484e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004852:	d81b      	bhi.n	800488c <UART_SetConfig+0x2b8>
 8004854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004858:	d00c      	beq.n	8004874 <UART_SetConfig+0x2a0>
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d815      	bhi.n	800488c <UART_SetConfig+0x2b8>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <UART_SetConfig+0x298>
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	d008      	beq.n	800487c <UART_SetConfig+0x2a8>
 800486a:	e00f      	b.n	800488c <UART_SetConfig+0x2b8>
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e022      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004874:	2302      	movs	r3, #2
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e01e      	b.n	80048ba <UART_SetConfig+0x2e6>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e01a      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e016      	b.n	80048ba <UART_SetConfig+0x2e6>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e012      	b.n	80048ba <UART_SetConfig+0x2e6>
 8004894:	efff69f3 	.word	0xefff69f3
 8004898:	40008000 	.word	0x40008000
 800489c:	40013800 	.word	0x40013800
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40004400 	.word	0x40004400
 80048a8:	40004800 	.word	0x40004800
 80048ac:	40004c00 	.word	0x40004c00
 80048b0:	40005000 	.word	0x40005000
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a9f      	ldr	r2, [pc, #636]	; (8004b3c <UART_SetConfig+0x568>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d17a      	bne.n	80049ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d824      	bhi.n	8004916 <UART_SetConfig+0x342>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x300>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004907 	.word	0x08004907
 80048e8:	08004917 	.word	0x08004917
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004917 	.word	0x08004917
 80048f4:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7fe fa6c 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80048fc:	61f8      	str	r0, [r7, #28]
        break;
 80048fe:	e010      	b.n	8004922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b8f      	ldr	r3, [pc, #572]	; (8004b40 <UART_SetConfig+0x56c>)
 8004902:	61fb      	str	r3, [r7, #28]
        break;
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe f9cd 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 800490a:	61f8      	str	r0, [r7, #28]
        break;
 800490c:	e009      	b.n	8004922 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e005      	b.n	8004922 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004920:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80fb 	beq.w	8004b20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	429a      	cmp	r2, r3
 8004938:	d305      	bcc.n	8004946 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	429a      	cmp	r2, r3
 8004944:	d903      	bls.n	800494e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800494c:	e0e8      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2200      	movs	r2, #0
 8004952:	461c      	mov	r4, r3
 8004954:	4615      	mov	r5, r2
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	022b      	lsls	r3, r5, #8
 8004960:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004964:	0222      	lsls	r2, r4, #8
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	6849      	ldr	r1, [r1, #4]
 800496a:	0849      	lsrs	r1, r1, #1
 800496c:	2000      	movs	r0, #0
 800496e:	4688      	mov	r8, r1
 8004970:	4681      	mov	r9, r0
 8004972:	eb12 0a08 	adds.w	sl, r2, r8
 8004976:	eb43 0b09 	adc.w	fp, r3, r9
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004988:	4650      	mov	r0, sl
 800498a:	4659      	mov	r1, fp
 800498c:	f7fb fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499e:	d308      	bcc.n	80049b2 <UART_SetConfig+0x3de>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a6:	d204      	bcs.n	80049b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	e0b6      	b.n	8004b20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049b8:	e0b2      	b.n	8004b20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c2:	d15e      	bne.n	8004a82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d828      	bhi.n	8004a1e <UART_SetConfig+0x44a>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x400>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a1f 	.word	0x08004a1f
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a1f 	.word	0x08004a1f
 80049ec:	08004a1f 	.word	0x08004a1f
 80049f0:	08004a1f 	.word	0x08004a1f
 80049f4:	08004a17 	.word	0x08004a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe f9ec 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80049fc:	61f8      	str	r0, [r7, #28]
        break;
 80049fe:	e014      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fe f9fe 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e010      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a08:	4b4d      	ldr	r3, [pc, #308]	; (8004b40 <UART_SetConfig+0x56c>)
 8004a0a:	61fb      	str	r3, [r7, #28]
        break;
 8004a0c:	e00d      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0e:	f7fe f949 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004a12:	61f8      	str	r0, [r7, #28]
        break;
 8004a14:	e009      	b.n	8004a2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1a:	61fb      	str	r3, [r7, #28]
        break;
 8004a1c:	e005      	b.n	8004a2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d077      	beq.n	8004b20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005a      	lsls	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d916      	bls.n	8004a7a <UART_SetConfig+0x4a6>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d212      	bcs.n	8004a7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f023 030f 	bic.w	r3, r3, #15
 8004a5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	8afb      	ldrh	r3, [r7, #22]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	8afa      	ldrh	r2, [r7, #22]
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	e052      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a80:	e04e      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d827      	bhi.n	8004ada <UART_SetConfig+0x506>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x4bc>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe f98e 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7fe f9a0 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	61f8      	str	r0, [r7, #28]
        break;
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <UART_SetConfig+0x56c>)
 8004ac6:	61fb      	str	r3, [r7, #28]
        break;
 8004ac8:	e00d      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fe f8eb 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004ace:	61f8      	str	r0, [r7, #28]
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d019      	beq.n	8004b20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085a      	lsrs	r2, r3, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d909      	bls.n	8004b1a <UART_SetConfig+0x546>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d205      	bcs.n	8004b1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60da      	str	r2, [r3, #12]
 8004b18:	e002      	b.n	8004b20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	; 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40008000 	.word	0x40008000
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	d10a      	bne.n	8004c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c98:	f7fc fd88 	bl	80017ac <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d10e      	bne.n	8004cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f82d 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e023      	b.n	8004d12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d10e      	bne.n	8004cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f817 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e00d      	b.n	8004d12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b09c      	sub	sp, #112	; 0x70
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	e0a5      	b.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d32:	f000 80a1 	beq.w	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fc fd39 	bl	80017ac <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d13e      	bne.n	8004dca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d60:	667b      	str	r3, [r7, #100]	; 0x64
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e067      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d04f      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d147      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
 8004e12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3308      	adds	r3, #8
 8004e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e44:	623a      	str	r2, [r7, #32]
 8004e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69f9      	ldr	r1, [r7, #28]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e010      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	f43f af4a 	beq.w	8004d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3770      	adds	r7, #112	; 0x70
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f000 f820 	bl	8004efc <_init>
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	0809af6c 	.word	0x0809af6c
 8004ee0:	0809af6c 	.word	0x0809af6c
 8004ee4:	0809af6c 	.word	0x0809af6c
 8004ee8:	0809af70 	.word	0x0809af70

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr
